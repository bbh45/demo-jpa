package com.example.demojpa.model;

import lombok.*;

import javax.persistence.*;

@Getter
@Setter
@AllArgsConstructor
@NoArgsConstructor
@ToString
@Builder
@Entity //It is from PARENT DEPENDENCY : DATA-JPA :- TO MAP JAVA OBJECT TO DB RELATION
//HIBERNATE, ECLIPSE LINK, OPEN JPA ARE IMPLEMENTATIONS OF JPA
//HIBERNATE IS DEFAULT IMPLEMENTATION OF JPA
//ENTITY IS FROM JPA BUT THE IMPLEMENTATION OF IT IS PROVIDED BY OUR PREFERRED FRAMEWORK E.G., HIBERNATE
//PROVIDES ABSTRACTION
@Table(name = "my_person")
public class Person {
    /*
    * AUTO -
    *       create table Person(id int Primary key, .....)
    *       insert into Person(id, name, ....) values(<ID>, <name>,......)
    *        - id is generated by hibernate. by creating a sequence (hibernate_sequence) and uses its next_val across all the tables using AUTO as Generation Type
    * IDENTITY
    *       create table Person(id int primary key auto_increment, ........)
    *       insert into Person(name,....) values(<name>,......)
    *       - It is same as using auto_increment on a column when creating table
    *       - Therefore the values are independent for each table
     */

    @Id  //TO MAKE ATTRIBUTE AS PRIMARY KEY
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
//    @Column(name = "first_name")
    @Column(unique = true, length = 50)
    private String firstName;
    private String lastName;
    private Integer age;
    private String dob;

    //Hibernate by default converts all the camel cases into words seperated by underscore for table columns
}

//ALL THE FIELDS WILL BE MAPPED TO A TABLE COLUMN UNLESS THEY HAVE THE STATIC KEYWORD OR @TRANSIENT ANNOTATION
//private static int id;

//LETS SAY HIBERNATES SESSION STARTED AT 4PM AND ENDED AT 4:30PM
/*
* 3 TYPES OF OBJECTS
* TRANSIENT - WHICH IS NOT PRESENT THE HIBERNATES SESSION, WHICH ARE NOT RETRIEVED OR STORED IN THE DATABASE DURING THE
* HIBERNATES SESSION
* PERSISTENT - WHICH ARE THERE IN THE HIBERNATES SESSION, WHICH ARE RETRIEVED(select) OR STORED(insert/update) IN THE DATABASE DURING THE
* HIBERNATES SESSION
* DETACHED - PERSISTENT OBJECTS AFTER THE HIBERNATES SESSION ENDED ARE CALLED DETACHED
*
* TRANSIENT -> PERSISTENT -> DETACHED
 */

//JPA DOES NOT WORK WITH/CONNECT TO DATABASE, HIBERNATE DOES BY CONNECTING TO THE DB AND EXECUTE THE QUERIES
//HIBERNATE IMPLEMENTS METHODS IN ENTITY MANAGER
//PERSIST - INSERT INTO
//MERGE - UPDATE
//REMOVE - DELETE
//FIND - SELECT

/*
*FOR ANY FUNCTIONALITY EG: RETRIEVE DATA (RETRIEVE FUNCTIONALITY PROVIDED BY JPA)
* HOW IT DOES IS AS BELOW
*
* 1.GETTING HIBERNATE SESSION -> JPA MAKES CALL TO HIBERNATE -> HIBERNATE RETURNED THE SESSION TO JPA
* 2.ADDING THE QUERY -> JPA ADDS THE QUERY(USING CRITERIA BUILDER)
* 3.EXECUTING THE QUERY -> JPA DELEGATES TO HIBERNATE -> HIBERNATE CALLS THE UNDERLYING DATABASE ->
* DATABASE RETURNS RESULT TO HIBERNATE -> JPA AND HIBERNATE TOGETHER PROVIDE THE RESULT TO USER
*
*/

/*
*   Repository
*       ^
*       |extends
*   CrudRepository(have all the common functions for each database)
*       ^
*       |extends
*   PagingAndSortingRepository      //till this part its common for all databases and are from spring-data-commons package
*       ^                   ^                             ^
*       |extends            |extends                      |extends
*   JpaRepository         MangoRepository       CassandraRepository  (have functions related to the specific database)
* (from spring-data-jpa   (from spring-data-
* package)                    mongo package)
*    |
* It is implemented by
* SimpleJpaRepository class                           (have implementations for all the functions specific to that database)
*
*
*/